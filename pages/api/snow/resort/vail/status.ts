import { NextApiRequest, NextApiResponse } from 'next'

const BASE_URL = "http://cache.snow.com/api/WeatherApi/GetWeather"

export interface VailResortStatus {
  reportDateTime: string,
  reportDateTimeAsDate: Date,
  lifts: {
    open: number,
    total: number,
  } | undefined,
  acres: {
    open: number,
    total: number,
  } | undefined,
  runs: {
    open: number,
    total: number,
  } | undefined,
  terrainPercentage: {
    open: number,
    total: number,
  },
  newSnowReadings: {
    overnight: {
      inches: number,
      centimeters: number,
    } | undefined,
    twentyFourHours: {
      inches: number,
      centimeters: number,
    } | undefined,
    fortyEightHours: {
      inches: number,
      centimeters: number,
    } | undefined,
    sevenDays: {
      inches: number,
      centimeters: number,
    } | undefined,
    overnightSummit: {
      inches: number,
      centimeters: number,
    } | undefined,
    twentyFourHoursSummit: {
      inches: number,
      centimeters: number,
    } | undefined,
    fortyEightHoursSummit: {
      inches: number,
      centimeters: number,
    } | undefined,
    sevenDaysSummit: {
      inches: number,
      centimeters: number,
    } | undefined,
  },
  baseSnowReadings: {
    summit: {
      inches: number,
      centimeters: number,
    } | undefined,
    midMountain: {
      inches: number,
      centimeters: number,
    } | undefined,
    baseArea: {
      inches: number,
      centimeters: number,
    } | undefined,
  },
  seasonSnowfall: {
    inches: number,
    centimeters: number,
  } | undefined,
  seasonSnowfallSummit: {
    inches: number,
    centimeters: number,
  } | undefined,
}

const SAMPLE_RESPONSE = {
  Id: '15',
  Description: '',
  ReportDateTime: '12/13/2023 05:34:00',
  ReportDateTimeAsDate: '2023-12-13T05:34:00-07:00',
  SnowConditions: 'Snow Groomed',
  MarketingText: null,
  AllOpenMessage: '',
  DisplayReportDateTime: false,
  DisplayAllOpen: false,
  Lifts: {
    Open: '11',
    Total: '33',
    Text: null,
    DisplayOpen: true,
    DisplayTotal: true
  },
  Acres: {
    Open: '0',
    Total: '0',
    Text: '',
    DisplayOpen: false,
    DisplayTotal: false
  },
  Runs: {
    Open: '145',
    Total: '278',
    Text: null,
    DisplayOpen: true,
    DisplayTotal: true
  },
  TerrainPercentage: {
    Open: '52',
    Total: '100',
    Text: null,
    DisplayOpen: true,
    DisplayTotal: true
  },
  NewSnowReadings: {
    Overnight: { Inches: '0', Centimeters: '0', Display: false },
    TwentyFourHours: { Inches: '0', Centimeters: '0', Display: false },
    FortyEightHours: { Inches: '0', Centimeters: '0', Display: false },
    SevenDays: { Inches: '21', Centimeters: '53', Display: false },
    OvernightSummit: { Inches: '0', Centimeters: '0', Display: false },
    TwentyFourHoursSummit: { Inches: '0', Centimeters: '0', Display: false },
    FortyEightHoursSummit: { Inches: '0', Centimeters: '0', Display: false },
    SevenDaysSummit: { Inches: '0', Centimeters: '0', Display: false }
  },
  BaseSnowReadings: {
    Summit: { Inches: '0', Centimeters: '0', Display: false },
    MidMountain: { Inches: '37', Centimeters: '93', Display: false },
    BaseArea: { Inches: '37', Centimeters: '93', Display: false }
  },
  SeasonSnowfall: { Inches: '89', Centimeters: '226', Display: false },
  SeasonSnowfallSummit: { Inches: '0', Centimeters: '0', Display: false },
  WeatherCommentary: {
    TodaysReport: '<div class="col-sm-2 forecast-label"><strong>Today</strong></div>\n' +
      '<div class="col-sm-10 forecast-text">Scattered snow showers before 11am, then scattered snow showers after 4pm. Partly sunny, with a high near 41. East southeast wind 5 to 10 mph. Chance of precipitation is 30%.</div>',
    WeatherReport: '<div class="col-sm-2 forecast-label"><strong>Thursday</strong></div>\n' +
      '<div class="col-sm-10 forecast-text">Isolated snow showers before 11am. Mostly sunny, with a high near 42. East southeast wind around 5 mph becoming west northwest in the afternoon. Chance of precipitation is 20%.</div>'
  }
}

// CORS proxy for API calls to Vail Resorts websites
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const id = req.query.id
  const url = `${BASE_URL}/${id}`
  const response = await fetch(url)

  if (!response.ok) {
    res.status(500).json({ message: `Failed to fetch weather data from ${url}: ${response.status} ${response.statusText} ` })
    return
  }
  const data = await response.json()
  const status = parseStatus(data)
  res.status(200).json(status)
}

// unholy mess of parsing the data from the Vail Resorts API generated by AI
function parseStatus(data: any) {
  const status: VailResortStatus = {
    reportDateTime: data.ReportDateTime,
    reportDateTimeAsDate: new Date(data.ReportDateTimeAsDate),
    lifts: data.Lifts ? {
      open: parseInt(data.Lifts.Open),
      total: parseInt(data.Lifts.Total),
    } : undefined,
    acres: data.Acres ? {
      open: parseInt(data.Acres.Open),
      total: parseInt(data.Acres.Total),
    } : undefined,
    runs: data.Runs ? {
      open: parseInt(data.Runs.Open),
      total: parseInt(data.Runs.Total),
    } : undefined,
    terrainPercentage: {
      open: parseInt(data.TerrainPercentage.Open),
      total: parseInt(data.TerrainPercentage.Total),
    },
    newSnowReadings: {
      overnight: data.NewSnowReadings.Overnight ? {
        inches: parseInt(data.NewSnowReadings.Overnight.Inches),
        centimeters: parseInt(data.NewSnowReadings.Overnight.Centimeters),
      } : undefined,
      twentyFourHours: data.NewSnowReadings.TwentyFourHours ? {
        inches: parseInt(data.NewSnowReadings.TwentyFourHours.Inches),
        centimeters: parseInt(data.NewSnowReadings.TwentyFourHours.Centimeters),
      } : undefined,
      fortyEightHours: data.NewSnowReadings.FortyEightHours ? {
        inches: parseInt(data.NewSnowReadings.FortyEightHours.Inches),
        centimeters: parseInt(data.NewSnowReadings.FortyEightHours.Centimeters),
      } : undefined,
      sevenDays: data.NewSnowReadings.SevenDays ? {
        inches: parseInt(data.NewSnowReadings.SevenDays.Inches),
        centimeters: parseInt(data.NewSnowReadings.SevenDays.Centimeters),
      } : undefined,
      overnightSummit: data.NewSnowReadings.OvernightSummit ? {
        inches: parseInt(data.NewSnowReadings.OvernightSummit.Inches),
        centimeters: parseInt(data.NewSnowReadings.OvernightSummit.Centimeters),
      } : undefined,
      twentyFourHoursSummit: data.NewSnowReadings.TwentyFourHoursSummit ? {
        inches: parseInt(data.NewSnowReadings.TwentyFourHoursSummit.Inches),
        centimeters: parseInt(data.NewSnowReadings.TwentyFourHoursSummit.Centimeters),
      } : undefined,
      fortyEightHoursSummit: data.NewSnowReadings.FortyEightHoursSummit ? {
        inches: parseInt(data.NewSnowReadings.FortyEightHoursSummit.Inches),
        centimeters: parseInt(data.NewSnowReadings.FortyEightHoursSummit.Centimeters),
      } : undefined,
      sevenDaysSummit: data.NewSnowReadings.SevenDaysSummit ? {
        inches: parseInt(data.NewSnowReadings.SevenDaysSummit.Inches),
        centimeters: parseInt(data.NewSnowReadings.SevenDaysSummit.Centimeters),
      } : undefined,
    },
    baseSnowReadings: {
      summit: data.BaseSnowReadings.Summit ? {
        inches: parseInt(data.BaseSnowReadings.Summit.Inches),
        centimeters: parseInt(data.BaseSnowReadings.Summit.Centimeters),
      } : undefined,
      midMountain: data.BaseSnowReadings.MidMountain ? {
        inches: parseInt(data.BaseSnowReadings.MidMountain.Inches),
        centimeters: parseInt(data.BaseSnowReadings.MidMountain.Centimeters),
      } : undefined,
      baseArea: data.BaseSnowReadings.BaseArea ? {
        inches: parseInt(data.BaseSnowReadings.BaseArea.Inches),
        centimeters: parseInt(data.BaseSnowReadings.BaseArea.Centimeters),
      } : undefined,
    },
    seasonSnowfall: data.SeasonSnowfall ? {
      inches: parseInt(data.SeasonSnowfall.Inches),
      centimeters: parseInt(data.SeasonSnowfall.Centimeters),
    } : undefined,
    seasonSnowfallSummit: data.SeasonSnowfallSummit ? {
      inches: parseInt(data.SeasonSnowfallSummit.Inches),
      centimeters: parseInt(data.SeasonSnowfallSummit.Centimeters),
    } : undefined,
  }
  return status
}